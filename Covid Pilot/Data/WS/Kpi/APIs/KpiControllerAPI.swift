//
// KpiControllerAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire
import RxSwift


open class KpiControllerAPI {
    
    private let clientApi : SwaggerClientAPI
    
    init(clientApi : SwaggerClientAPI) {
        self.clientApi = clientApi;
    }
    
    /**
     Guarda las KPIs enviadas

     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open func saveKpi(body: [KpiDto], completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        saveKpiWithRequestBuilder(body: body).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     Guarda las KPIs enviadas
     - parameter body: (body)  
     - returns: Observable<Void>
     */
    open func saveKpi(body: [KpiDto]) -> Observable<Void> {
        return Observable.create { [weak self] observer -> Disposable in
            self?.saveKpi(body: body) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Guarda las KPIs enviadas
     - POST /kpi
     - 

     - parameter body: (body)  

     - returns: RequestBuilder<Void> 
     */
    open func saveKpiWithRequestBuilder(body: [KpiDto]) -> RequestBuilder<Void> {
        let path = "/kpi"
        let URLString = clientApi.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
