//
// AnswersControllerAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire
import RxSwift


open class AnswersControllerAPI {
    
    private let clientApi : SwaggerClientAPI
    
    init(clientApi : SwaggerClientAPI) {
        self.clientApi = clientApi;
    }
    
    /**
     Borra las respuestas de un usuario

     - parameter sEDIAUserToken: (header)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open func deleteAnswers(sEDIAUserToken: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        deleteAnswersWithRequestBuilder(sEDIAUserToken: sEDIAUserToken).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     Borra las respuestas de un usuario
     - parameter sEDIAUserToken: (header)
     - returns: Observable<Void>
     */
    open func deleteAnswers(sEDIAUserToken: String) -> Observable<Void> {
        return Observable.create { [weak self] observer -> Disposable in
            self?.deleteAnswers(sEDIAUserToken: sEDIAUserToken) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Borra las respuestas de un usuario
     - DELETE /answers
     - 

     - :
       - type: http
       - name: bearerAuth
     - parameter sEDIAUserToken: (header)  

     - returns: RequestBuilder<Void> 
     */
    open func deleteAnswersWithRequestBuilder(sEDIAUserToken: String) -> RequestBuilder<Void> {
        let path = "/answers"
        let URLString = clientApi.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
                        "SEDIA-UserToken": sEDIAUserToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Graba las respuestas de un usuario

     - parameter body: (body)  
     - parameter sEDIAUserToken: (header)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open func saveQuestions(body: [AnswerOptionDto], sEDIAUserToken: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        saveQuestionsWithRequestBuilder(body: body, sEDIAUserToken: sEDIAUserToken).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }

    /**
     Graba las respuestas de un usuario
     - parameter body: (body)  
     - parameter sEDIAUserToken: (header)  
     - returns: Observable<Void>
     */
    open func saveQuestions(body: [AnswerOptionDto], sEDIAUserToken: String) -> Observable<Void> {
        return Observable.create { [weak self] observer -> Disposable in
            self?.saveQuestions(body: body, sEDIAUserToken: sEDIAUserToken) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Graba las respuestas de un usuario
     - POST /answers
     - 

     - :
       - type: http
       - name: bearerAuth
     - parameter body: (body)  
     - parameter sEDIAUserToken: (header)  

     - returns: RequestBuilder<Void> 
     */
    open func saveQuestionsWithRequestBuilder(body: [AnswerOptionDto], sEDIAUserToken: String) -> RequestBuilder<Void> {
        let path = "/answers"
        let URLString = clientApi.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
                        "SEDIA-UserToken": sEDIAUserToken
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

}
