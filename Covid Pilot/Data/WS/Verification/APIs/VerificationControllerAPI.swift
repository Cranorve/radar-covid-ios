//
// VerificationControllerAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire
import RxSwift


open class VerificationControllerAPI {
    
    private let clientApi : SwaggerClientAPI
    
    init(clientApi : SwaggerClientAPI) {
        self.clientApi = clientApi;
    }
    
    /**
     Verify provided Tan

     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open func verifyTan(body: Tan, completion: @escaping ((_ data: JSONValue?,_ error: Error?) -> Void)) {
        verifyTanWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Verify provided Tan
     - parameter body: (body)  
     - returns: Observable<JSONValue>
     */
    open func verifyTan(body: Tan) -> Observable<JSONValue> {
        return Observable.create { [weak self] observer -> Disposable in
            self?.verifyTan(body: body) { data, error in
                if let error = error {
                    observer.on(.error(error))
                } else {
                    observer.on(.next(data!))
                }
                observer.on(.completed)
            }
            return Disposables.create()
        }
    }

    /**
     Verify provided Tan
     - POST /tan/verify

     - :
       - type: http
       - name: bearerAuth
     - examples: [{contentType=application/json, example={ }}]
     - parameter body: (body)  

     - returns: RequestBuilder<JSONValue> 
     */
    open func verifyTanWithRequestBuilder(body: Tan) -> RequestBuilder<JSONValue> {
        let path = "/tan/verify"
        let URLString = clientApi.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<JSONValue>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
